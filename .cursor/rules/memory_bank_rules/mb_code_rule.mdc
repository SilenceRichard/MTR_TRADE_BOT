---
description: 
globs: 
alwaysApply: false
---
# 编码模式 (Code Mode)

*本文档定义了Cursor AI助手在编码模式下的行为、职责和工作流程。编码模式专注于代码实现、修改和优化。*

## 📋 模式定义

**编码模式** 是Cursor AI助手的核心工作模式之一，专注于：
- 功能实现和代码编写
- 代码修改和优化
- 代码重构和改进
- 代码文档和注释
- 代码审查和质量保证

## 🧠 Memory Bank使用

编码模式应按以下方式使用Memory Bank：

1. **启动时读取**
   - 读取`productContext.md`了解项目整体背景
   - 读取`activeContext.md`了解当前会话状态
   - 读取`systemPatterns.md`了解项目的编码规范和模式
   - 读取`progress.md`了解当前任务和进度
   - 读取`decisionLog.md`了解相关设计决策

2. **优先级处理**
   - `systemPatterns.md`中的编码规范是最高优先级
   - `activeContext.md`中的当前任务和上下文信息次之
   - `decisionLog.md`中的设计决策提供实现指导
   - `productContext.md`提供功能需求和整体方向

### Memory Bank更新责任

编码模式负责以下文件的更新：

1. **progress.md**
   - 触发时机：完成代码任务、实现功能、解决问题时
   - 格式：`[YYYY-MM-DD HH:MM:SS] - [完成的任务摘要]`
   - 内容：将任务从"当前任务"移至"已完成任务"

2. **activeContext.md**
   - 触发时机：遇到代码相关问题、发现需要澄清的需求时
   - 格式：`[YYYY-MM-DD HH:MM:SS] - [问题/需求描述]`
   - 内容：添加到"开放问题/议题"部分

3. **systemPatterns.md**
   - 触发时机：识别或实现新的代码模式、优化方法时
   - 格式：`[YYYY-MM-DD HH:MM:SS] - [代码模式描述]`
   - 内容：添加到"编码模式"部分

## 💻 编码实践

编码模式应遵循以下最佳实践：

1. **代码一致性**
   - 遵循项目已有的代码风格和模式
   - 保持命名约定和格式一致
   - 使用已在项目中使用的库和工具

2. **质量保证**
   - 编写简洁、可读、可维护的代码
   - 避免代码重复和冗余
   - 考虑边缘情况和错误处理
   - 确保代码性能和效率

3. **文档和注释**
   - 为复杂逻辑添加适当注释
   - 为函数和类提供清晰的文档
   - 解释非直观的实现决策

4. **代码组织**
   - 遵循模块化和组件化原则
   - 保持函数和类的单一职责
   - 适当分离关注点

## 🤝 模式协作

编码模式与其他模式的协作关系：

### 1. 与架构师模式的协作

- **接收设计规范**
  - 架构图和系统设计
  - 组件关系和接口定义
  - 技术选型和框架决策
- **实现反馈**
  - 可行性评估
  - 技术限制反馈
  - 实现挑战沟通
- **切换触发条件**
  - 需要架构决策
  - 设计不明确
  - 技术选型问题

### 2. 与测试模式的协作

- **测试支持**
  - 提供可测试的代码
  - 实现单元测试
  - 集成测试支持
- **质量反馈**
  - 接收测试结果
  - 修复测试失败
  - 提高代码覆盖率
- **切换触发条件**
  - 需要测试执行
  - 测试失败分析
  - 覆盖率改进

### 3. 与调试模式的协作

- **问题解决**
  - 接收bug报告
  - 代码修复实现
  - 性能优化
- **预防措施**
  - 改进错误处理
  - 加强边缘情况处理
  - 增强代码稳定性
- **切换触发条件**
  - 遇到复杂bug
  - 需要深入调试
  - 性能分析需求

### 4. 与问答模式的协作

- **知识应用**
  - 接收技术指导
  - 获取最佳实践
  - 学习新概念
- **解释提供**
  - 提供代码解释
  - 说明实现逻辑
  - 分享实现经验
- **切换触发条件**
  - 需要技术咨询
  - 概念解释需求
  - 学习资源需求

## 🔄 模式触发

以下关键词和场景将触发编码模式：

- "实现"、"编写代码"、"开发功能"
- "修复"、"优化"、"重构"
- "添加功能"、"更新代码"
- "代码审查"、"性能优化"
- "Bug修复"、"功能实现"
- "编写测试"、"代码示例"

## 📝 代码变更流程

在代码变更过程中，编码模式应遵循以下流程：

1. **变更前准备**
   - 理解需求和上下文
   - 检查相关文件和依赖
   - 了解系统架构和模式

2. **实施变更**
   - 编写清晰可读的代码
   - 遵循项目编码规范
   - 优先使用已有库和工具
   - 添加必要的文档和注释

3. **质量检查**
   - 检查代码逻辑和正确性
   - 验证功能需求的实现
   - 确保没有引入新的问题
   - 保持代码可维护性

4. **文档更新**
   - 更新相关文档
   - 在systemPatterns.md中添加新模式
   - 在progress.md中更新进度 