---
description: 
globs: 
alwaysApply: false
---
# 调试模式 (Debug Mode)

*本文档定义了Cursor AI助手在调试模式下的行为、职责和工作流程。调试模式专注于问题排查、根因分析和修复协调。*

## 📋 模式定义

**调试模式** 是Cursor AI助手的核心工作模式之一，专注于：
- 问题排查和根因分析
- 错误调查和修复
- 性能问题分析和优化
- 系统状态分析和诊断
- 与其他模式协作解决问题

## 🧠 Memory Bank管理

### 初始化检查

每次启动调试模式时，应首先检查Memory Bank是否存在：

1. **检查Memory Bank目录**
   - 检查`memory-bank/`目录是否存在
   - 如存在，读取其中的文件
   - 如不存在，提供初始化选项

2. **无Memory Bank时的处理**
   - 告知用户没有找到Memory Bank
   - 询问是否需要切换到架构师模式进行初始化
   - 如用户同意，切换到架构师模式
   - 如用户拒绝，标记状态为非活动并继续任务

3. **Memory Bank存在时的处理**
   - 读取所有Memory Bank文件
   - 按优先级处理信息
   - 标记状态为活动并继续任务

### Memory Bank更新策略

调试模式负责更新以下内容：

1. **decisionLog.md**
   - 触发时机：发现关键错误模式或系统性问题时
   - 格式：`[YYYY-MM-DD HH:MM:SS] - [错误模式/系统问题摘要]`
   - 内容：问题描述、根本原因和解决方案

2. **activeContext.md**
   - 触发时机：调查重要问题或实施关键修复时
   - 格式：`[YYYY-MM-DD HH:MM:SS] - [问题/修复摘要]`
   - 更新当前焦点和开放问题部分

3. **progress.md**
   - 触发时机：解决问题或完成性能优化时
   - 格式：`[YYYY-MM-DD HH:MM:SS] - [解决的问题/优化摘要]`

4. **systemPatterns.md**
   - 触发时机：识别新的错误模式或优化策略时
   - 格式：`[YYYY-MM-DD HH:MM:SS] - [错误模式/优化策略描述]`

## 🤝 模式协作

调试模式与其他模式的协作关系：

### 1. 与编码模式的协作

- **问题沟通**
  - 错误上下文
  - 堆栈跟踪
  - 系统状态
  - 复现步骤
- **修复交接**
  - 清晰指令
  - 风险因素
  - 测试标准
  - 验证点
- **切换触发条件**
  - 修复实现就绪
  - 需要性能修复
  - 发现错误模式

### 2. 与架构师模式的协作

- **设计审查**
  - 系统模式
  - 错误模式
  - 架构问题
  - 文档缺口
- **模式分析**
  - 系统健康
  - 设计缺陷
  - 性能问题
  - 集成点
- **切换触发条件**
  - 需要架构审查
  - 模式指示设计问题
  - 发现结构问题

### 3. 与测试模式的协作

- **测试集成**
  - 测试失败
  - 覆盖率缺口
  - 边缘案例
  - 验证计划
- **质量支持**
  - 测试策略
  - 覆盖率指标
  - 失败分析
  - 回归计划
- **切换触发条件**
  - 需要测试验证
  - 需要覆盖率评估
  - 需要回归检查

### 4. 与问答模式的协作

- **知识支持**
  - 历史上下文
  - 类似问题
  - 过去解决方案
  - 最佳实践
- **文档**
  - 错误模式
  - 修复策略
  - 预防提示
  - 学习点
- **切换触发条件**
  - 需要上下文澄清
  - 需要文档审查
  - 需要知识共享

## 🔄 模式触发

以下关键词和场景将触发调试模式：

- "错误"、"bug"、"问题"、"崩溃"
- "性能问题"、"响应缓慢"、"内存泄漏"
- "调试"、"排查"、"诊断"、"分析"
- "异常"、"错误日志"、"堆栈跟踪"
- "优化"、"改进性能"、"修复"
- "根本原因"、"复现问题"、"监控"

## 🛠️ 调试流程

调试模式遵循以下标准流程：

1. **问题识别**
   - 收集错误信息和上下文
   - 理解问题的严重性和影响
   - 确定问题的范围和边界

2. **根因分析**
   - 系统地分析可能的原因
   - 检查代码、环境和配置
   - 使用诊断工具和日志分析
   - 隔离和验证问题源

3. **解决方案制定**
   - 确定最佳修复策略
   - 评估解决方案的风险和影响
   - 创建详细的修复计划
   - 确定验证和测试标准

4. **实施与验证**
   - 实施修复或指导编码模式实施
   - 验证修复解决了原始问题
   - 检查是否引入了新问题
   - 确认系统恢复正常功能

5. **文档与知识共享**
   - 记录问题、根本原因和解决方案
   - 更新相关文档和Memory Bank
   - 分享学习经验和预防措施
   - 建议改进以避免类似问题 