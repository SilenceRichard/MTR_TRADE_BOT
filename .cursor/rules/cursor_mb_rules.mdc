---
description: 
globs: 
alwaysApply: false
---
# Cursor Memory Bank 使用规则

*此文件提供Cursor AI助手如何处理和操作Memory Bank的指导。这些规则应被视为AI助手处理项目上下文的框架。*

## 🧠 Memory Bank读取规则

1. **启动时读取**
   - 当在项目中首次与AI助手交互时，应首先检查`memory-bank`目录是否存在
   - 如果存在，应依次阅读以下文件：
     - `productContext.md` - 了解项目整体背景
     - `activeContext.md` - 了解当前会话状态
     - `systemPatterns.md` - 了解项目的模式和规范
     - `progress.md` - 了解项目进度
     - `decisionLog.md` - 了解项目决策历史

2. **上下文优先级**
   - 来自`activeContext.md`的信息应被视为最高优先级
   - 来自`productContext.md`的信息应被视为项目基础知识
   - 来自`systemPatterns.md`的信息应被用于保持代码一致性
   - 来自`progress.md`的信息应被用于理解项目状态
   - 来自`decisionLog.md`的信息应被用于理解设计决策

3. **缺少Memory Bank的处理**
   - 如果`memory-bank`目录不存在，提供创建它的指导
   - 询问是否需要初始化Memory Bank，并说明其好处

## 🔄 工作模式

AI助手应根据用户的请求或当前任务的性质，采用以下模式之一：

### 1. 架构师模式 (Architect)

**当需要**:
- 系统设计讨论
- 架构决策
- 项目结构规划
- 技术选型

**行为**:
- 专注于高层次设计和架构原则
- 记录重要决策到`decisionLog.md`
- 更新`systemPatterns.md`以反映架构模式
- 关注可扩展性、可维护性和性能

### 2. 编码模式 (Code)

**当需要**:
- 实现新功能
- 修改现有代码
- 重构代码
- 优化性能

**行为**:
- 专注于代码实现细节
- 遵循`systemPatterns.md`中的编码规范
- 更新`progress.md`以反映代码变更
- 关注代码质量、效率和可读性

### 3. 问答模式 (Ask)

**当需要**:
- 解释代码或概念
- 提供技术建议
- 回答项目相关问题
- 记录知识或文档

**行为**:
- 专注于清晰解释和知识传递
- 参考Memory Bank提供一致的回答
- 更新`activeContext.md`以反映重要讨论
- 关注准确性、清晰度和教育价值

### 4. 调试模式 (Debug)

**当需要**:
- 错误排查和根因分析
- 性能问题诊断
- 解决系统异常
- 修复代码缺陷

**行为**:
- 专注于问题识别和根本原因分析
- 记录错误模式到`systemPatterns.md`
- 更新`progress.md`以反映问题解决情况
- 关注系统稳定性、错误修复和性能优化

### 5. 测试模式 (Test)

**当需要**:
- 测试驱动开发
- 编写测试用例
- 执行测试评估
- 质量保证

**行为**:
- 专注于测试策略和测试用例设计
- 遵循`systemPatterns.md`中的测试规范
- 更新`progress.md`以反映测试结果
- 关注测试覆盖率、质量指标和验证标准

## 📝 Memory Bank更新规则

### 1. 更新触发条件

- **主动更新**: 用户使用`UMB`(Update Memory Bank)命令
- **隐含更新**: 在完成重大任务或会话结束时

### 2. 更新方式

- 使用Cursor的文件编辑工具修改相应文件
- 保持文件格式一致
- 添加时间戳标注最后更新时间

### 3. 文件特定更新规则

#### activeContext.md
- 更新当前任务状态
- 记录最近的重要讨论
- 更新当前工作模式
- 更新关注的文件或组件列表

#### progress.md
- 将完成的任务从"当前工作"移至"已完成工作"
- 添加新的计划任务
- 更新风险和问题
- 添加最近更新到更新日志

#### decisionLog.md
- 添加新的技术决策记录
- 更新现有决策的状态
- 保持决策ID的连续性

#### systemPatterns.md
- 添加新识别的模式
- 完善现有模式的文档
- 添加新的代码示例

#### productContext.md
- 更新项目整体信息(较少更新)
- 添加新的核心功能
- 更新技术栈信息
- 更新系统架构说明

## 🔄 模式切换

### 识别模式切换需求

- 根据用户的提问或任务自然识别需要的模式
- 特定关键词可能表明模式切换需求：
  - "设计"、"架构"、"结构" → 架构师模式
  - "实现"、"编码"、"开发" → 编码模式
  - "解释"、"什么是"、"如何" → 问答模式
  - "错误"、"问题"、"调试"、"修复" → 调试模式
  - "测试"、"验证"、"覆盖率"、"质量" → 测试模式

### 执行模式切换

- 在切换模式时，记录在`activeContext.md`中
- 在回复中反映模式切换
- 根据新模式的规则调整行为

## 📋 最佳实践，标准Cursor开发流程

*这些规则旨在使AI助手能够有效地利用Memory Bank系统，保持项目上下文的连续性和一致性。* 

标准的Cursor开发流程基于Memory Bank系统，包括多个阶段和工作模式，确保AI助手能够在多个会话之间保持项目上下文，提高开发效率和质量。

### 1. 项目初始化阶段

- 创建项目根目录下的`memory-bank`文件夹
- 初始化核心文件：
  - `activeContext.md` - 当前会话状态
  - `productContext.md` - 项目概述
  - `progress.md` - 进度跟踪
  - `decisionLog.md` - 决策记录
  - `systemPatterns.md` - 系统模式文档
- 创建项目简介文档，使用`cursor-project-brief-template.mdc`模板

### 2. 开发规划阶段（架构师模式）

- 明确告知Cursor使用架构师模式
- 设计系统架构和组织结构
- 制定技术选型和框架决策
- 更新`productContext.md`记录项目概述和架构
- 更新`decisionLog.md`记录关键决策和理由

### 3. 实施开发阶段（编码模式）

- 切换到编码模式进行代码实现
- 按照架构设计实现功能
- 遵循`systemPatterns.md`项目编码规范和模式
- 更新`progress.md`记录任务进度
- 更新`activeContext.md`记录当前工作状态

### 4. 问题解决阶段（调试模式）

- 切换到调试模式解决问题
- 分析错误原因和系统行为
- 实施修复和验证解决方案
- 记录问题和解决方案到`decisionLog.md`

### 5. 质量保证阶段（测试模式）

- 切换到测试模式编写测试用例
- 执行测试并分析结果
- 验证功能实现满足需求
- 更新`progress.md`记录测试状态

### 6. 知识共享阶段（问答模式）

- 使用问答模式解释代码和设计决策
- 创建文档和注释
- 记录重要信息到`systemPatterns.md`

### 7. 会话管理流程

- 每次会话开始时，Cursor读取Memory Bank文件了解项目状态
- 会话中根据需要智能切换工作模式
- 会话结束前使用`UMB`(Update Memory Bank)指令更新相关文件
- 确保文档与代码保持一致

### 8. 文档维护规则

- 在代码更改的同时更新相关文档
- 使用明确的任务状态标记（`[ ]`和`[x]`）
- 记录重要决策和问题的解决方案
- 定期整理Memory Bank内容保持清晰

### 9. 模式切换原则

- 根据任务性质选择适当的工作模式
- 通过关键词和指令明确告知Cursor当前模式
- 根据需要在不同模式间灵活切换

---
